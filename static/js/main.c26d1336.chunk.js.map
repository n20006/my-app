{"version":3,"sources":["components/DarkmodeTemplete.jsx","components/ViewChart.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["DarkmodeSample","React","useState","window","localStorage","getItem","darkMode","setDarkMode","theme","createMuiTheme","palette","primary","main","colors","type","ThemeProvider","CssBaseline","IconButton","id","color","onClick","setItem","ViewChart","props","console","log","data","ComposedChart","layout","width","height","margin","top","right","bottom","left","CartesianGrid","stroke","XAxis","unit","YAxis","dataKey","Tooltip","Bar","barSize","fill","VisionApp","state","content","KEY","process","REACT_APP_APIKEY","URI","FQDN","value","base64","replace","this","setState","SendRequest","param","headers","Accept","method","body","JSON","stringify","requests","features","maxResults","image","fetch","then","res","json","responses","labelAnnotations","map","v","description","score","labelText","multiple","callbackFunction","file","handleChange","buttonComponent","Button","variant","accept","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c26d1336.chunk.js","sourcesContent":["import React from 'react'\nimport '../App.css'\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles'\nimport * as colors from '@material-ui/core/colors'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport IconButton from '@material-ui/core/IconButton'\nimport Brightness7Icon from '@material-ui/icons/Brightness7'\nimport Brightness4Icon from '@material-ui/icons/Brightness4'\n\nconst DarkmodeSample = () => {\n  const [darkMode, setDarkMode] = React.useState(\n    window.localStorage.getItem('darkMode') === 'on'\n  )\n  const handleDarkModeOn = () => {\n    window.localStorage.setItem('darkMode', 'on')\n    setDarkMode(true)\n  }\n  const handleDarkModeOff = () => {\n    window.localStorage.setItem('darkMode', 'off')\n    setDarkMode(false)\n  }\n  const theme = createMuiTheme({\n    palette: {\n      primary: {\n        main: colors.blue[800]\n      },\n      type: darkMode ? 'dark' : 'light'\n    }\n  })\n\n  return (\n    <>\n      <ThemeProvider theme={theme}>\n        <CssBaseline />{' '}\n        {darkMode ? (\n          <IconButton id='btn' color='inherit' onClick={handleDarkModeOff}>\n            <Brightness7Icon />{' '}\n          </IconButton>\n        ) : (\n          <IconButton id='btn' color='inherit' onClick={handleDarkModeOn}>\n            <Brightness4Icon />{' '}\n          </IconButton>\n        )}\n      </ThemeProvider>{' '}\n    </>\n  )\n}\n\nexport default DarkmodeSample\n","import React from 'react'\nimport {\n  ComposedChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip\n} from 'recharts'\n\nconst ViewChart = props => {\n  console.log(props.data)\n  return (\n    <ComposedChart\n      layout='vertical'\n      width={500}\n      height={400}\n      data={props.data}\n      margin={{\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      }}\n    >\n      <CartesianGrid stroke='#f5f5f5' />\n      <XAxis type='number' unit='%' />\n      <YAxis dataKey='description' type='category' />\n      <Tooltip />\n      <Bar dataKey='score' barSize={15} fill='#413ea0' />\n    </ComposedChart>\n  )\n}\n\nexport default ViewChart\n","import React from 'react'\nimport './App.css'\nimport { Button } from '@material-ui/core'\nimport FileInputComponent from 'react-file-input-previews-base64'\nimport DarkmodeSample from './components/DarkmodeTemplete'\nimport ViewChart from './components/ViewChart'\n\nclass VisionApp extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = { content: [], data: [] }\n    this.KEY = process.env.REACT_APP_APIKEY\n    this.URI = 'https://vision.googleapis.com/v1/images:annotate?key='\n    this.FQDN = this.URI + this.KEY\n  }\n\n  // 画像データ\n  handleChange (value) {\n    const base64 = value.replace('data:image/jpeg;base64,', '')\n    this.setState({ content: base64 })\n    this.SendRequest()\n  }\n\n  // リクエスト情報\n  SendRequest () {\n    const body = JSON.stringify({\n      requests: [\n        {\n          features: [\n            {\n              type: 'LABEL_DETECTION',\n              maxResults: 5\n            }\n          ],\n          image: {\n            content: this.state.content\n          }\n        }\n      ]\n    })\n\n    const param = {\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      method: 'POST',\n      body: body\n    }\n\n    // レスポンス\n    window\n      .fetch(this.FQDN, param)\n      .then(res => res.json())\n      .then(json => json.responses[0].labelAnnotations)\n      .then(json =>\n        json.map(v => ({ description: v.description, score: v.score * 100 }))\n      )\n      .then(v => this.setState({ data: v }))\n      .then(v => console.log(v))\n    console.log(this.state)\n  }\n\n  // 表示\n  render () {\n    return (\n      <div>\n        <DarkmodeSample />\n        <h1>画像に含まれるオブジェクト</h1>\n        <div id='fileselect'>\n          <FileInputComponent\n            labelText=''\n            multiple={false}\n            callbackFunction={file => this.handleChange(file.base64)}\n            buttonComponent={\n              <Button variant='outlined' color='secondary'>\n                SelectFile\n              </Button>\n            }\n            accept='image/*'\n          />\n        </div>\n        <div id='chart'>\n          <ViewChart data={this.state.data} />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default VisionApp\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}